#!/bin/hxtool
/**
 * https://github.com/tondy67/hxtool
 * http://lib.haxe.org/p/hscript
 **/
var cfgFile = "config.json";

var app = "app";
var main = "App";
var libs = [];
var src = ["src","../abv"];
var opt = ["gui"];

var dirFlash = "bin/flash/";
var dirJs = "bin/js/";
var dirCpp = "bin/cpp/";
var dirNeko = "bin/neko/";
var dirAndroid = "bin/android/";
var ndll = "abv-tools/libs/"+uname()+"/";
switch(uname()){
	case "Linux": ndll += archX()+"/libABV.so"; 
	case "Windows": ndll += "ABV.dll"; 
	case "Mac": "";
}
//print(ndll);
var htmlFile = "index.html";
///
var projectDir = dirname(args[0]);
cd(projectDir);
projectDir = pwd();

var browser = switch(uname()){
	case "Linux": "xdg-open";
	case "Windows": "start";
	case "Mac": "open";
	default: "";
}
if(browser == "")exit("no browser");

var cfg = null;
try cfg = json(cat(cfgFile))catch(m:Dynamic){print(m+"");};
if(cfg == null)exit("no config");
var v = "";
if(cfg.name == null) v += "name, ";
if(cfg.width == null) v += "width, ";
if(cfg.height == null) v += "height, ";
if(cfg.ups == null) v += "ups";
if(v !="")exit("no cfg values: "+v);


var res = [];
if(cfg.appResources != null) for(l in cfg.appResources)res.push(l);

function info()
{
	print("Name: " + cfg.name);
	print("Size: " + cfg.width+"x"+cfg.height);
	if(cfg.version != null)print("Version: " + cfg.version);
	if(cfg.author != null)print("Author: " + cfg.author);
}
//clear();
var debug = false;
if(args[3] == "debug") debug = true;

var target = switch(args[2]){
	case "flash": 	"flash";
	case "js":		"js";
	case "neko": 	"neko";
	case "cpp": 	"cpp";
	default: "";
}
//
function help()
{
	print("Usage:\n ./make.hxs build|run|test|info|help|rebuild [flash|js|neko|cpp] [debug]");
}

function getOptions()
{
	var r = "-main " + main;

	for(a in libs)r += " -lib " + a;
	for(a in src)r += " -cp " + a;
	for(a in opt)r += " -D " + a;

	if(debug)r += " -D debug";
	else if(target != "flash")r += " -D no-traces";

	return r;
}

function build()
{ 
	var out = "";
	var dir = "";
	switch(target){
		case "flash": 
			dir = dirFlash;
			out = " -swf "+ dirFlash+app+".swf -swf-version 11.2 -swf-header "+cfg.width+":"+cfg.height+":32:FFFFFF  ";
		case "js":
			dir = dirJs;
			out = " -js "+ dirJs + app + ".js";
		case "neko":
			dir = dirNeko;
			out = " -neko "+ dirNeko + app + ".n";
		case "cpp":
			dir = dirCpp;
			out = " -cpp "+ dirCpp;
		default: print("no target"); help(); return;
	}
	
	if(!exists(dir))rebuild();
	
	echo("Build "+target+" ("+cfg.name+") on "+uname()+"\n");
	var s = getOptions() + out; //print(s);
	var arg = s.split(" "); 
	command("haxe",arg);
}
function getCss(n:String)
{
	var r = "";
	if(exists(n)) r = "<link rel=\"stylesheet\" type=\"text/css\" href=\""+n+"\" />";
	return r;
}
function getHtml()
{
	var s = "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">";

	if(target == "js"){
		s+= getCss(cfg.res+cfg.name+".css");
		s+= getCss("res/ui/default/gui.css");
	}
	
	s += "\n\t<title>"+cfg.name+"</title>\n</head>\n<body id=\"body\" >\n";
	
	if(target == "flash") s += "<object type=\"application/x-shockwave-flash\" data=\"app.swf\" width=\""+cfg.width+"\" height=\""+cfg.height+"\">\n\t<param name=\"movie\" value=\"app.swf\" />\n\t<param name=\"quality\" value=\"high\" />\n</object>";
	else s += "<script type=\"text/javascript\" src=\""+app+".js\"></script>";

	s += "\n</body>\n</html>";
	return s;
}

function rebuild()
{
	switch(target){
		case "flash": 
			prebuild(dirFlash); save(dirFlash+htmlFile,getHtml());
		case "js":
			prebuild(dirJs); save(dirJs+htmlFile,getHtml());
		case "neko":
			prebuild(dirNeko);
		case "cpp":
			prebuild(dirCpp);
		default: print("no target"); help(); return;
	}
}

function prebuild(dir:String)
{
	cd(projectDir);
	rm(dir,"r"); 
	mkdir(dir);
	cd(dir);
	ln("../../res","res");
	if(target == "neko") ln("../../../"+ndll,"abv.ndll");
	cd(projectDir);
}

function run()
{
	var s = "Run: ";
	switch(target){
		case "flash": 
			print(s+target);
			command(browser,[ dirFlash + htmlFile]);
		case "js":
			print(s+target);
			command(browser,[ dirJs + htmlFile]);
		case "neko":
			print(s+target);
			cd( "bin/neko");
			command("nekotools",["boot",app+".n"]);
			command("./" + app);
		case "cpp":
			print(s+target);
			cd( "bin/cpp");
			command("./" + main);
		default: help(); return;
	}
}
function test()
{
	build();
	run();
}
// command
switch(args[1]){
	case "help": 	help();
	case "info": 	info();
	case "rebuild": rebuild(); build();
	case "build": 	build();
	case "run": 	run();
	case "test": 	test();
	default: help();
}

